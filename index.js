require("dotenv").config();
const axios = require("axios");
const nodemailer = require("nodemailer");

// тЬЕ Environment ржерзЗржХрзЗ рждржерзНржп ржирж┐ржЪрзНржЫрж┐
const API_KEY = process.env.API_KEY;
const ADDRESS = process.env.ADDRESS.toLowerCase();
const CHAIN_ID = process.env.CHAIN_ID;

const GMAIL_USER = process.env.GMAIL_USER;
const GMAIL_PASS = process.env.GMAIL_PASS;
const GMAIL_RECEIVER = process.env.GMAIL_RECEIVER;

let lastTxHash = null;

// Gmail SMTP рж╕рзЗржЯржЖржк
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: GMAIL_USER,
    pass: GMAIL_PASS,
  },
});

// ржЗржорзЗржЗрж▓ ржкрж╛ржарж╛ржирзЛрж░ ржлрж╛ржВрж╢ржи
function sendEmailNotification(tx) {
  const tokenAmount = tx.value / Math.pow(10, tx.tokenDecimal);

  const mailOptions = {
    from: `"ЁЯУе Token Alert" <${GMAIL_USER}>`,
    to: GMAIL_RECEIVER,
    subject: `тЬЕ ${tx.tokenSymbol} ржЗржиржХрж╛ржорж┐ржВ ржЯрзЛржХрзЗржи ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи`,
    text: `
ЁЯУе ржирждрзБржи ${tx.tokenSymbol} ржЗржиржХрж╛ржорж┐ржВ ржЯрзЛржХрзЗржи ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ!

ЁЯФ╕ Amount: ${tokenAmount}
ЁЯФ╕ From: ${tx.from}
ЁЯФ╕ To: ${tx.to}
ЁЯФ╕ Tx Hash: ${tx.hash}
ЁЯФ╕ Time: ${new Date(tx.timeStamp * 1000).toLocaleString()}

ЁЯФЧ View on BscScan: https://bscscan.com/tx/${tx.hash}
    `,
  };

  transporter.sendMail(mailOptions, (err, info) => {
    if (err) {
      console.error("тЭМ ржЗржорзЗржЗрж▓ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛:", err.message);
    } else {
      console.log("ЁЯУй ржЗржорзЗржЗрж▓ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ:", info.response);
    }
  });
}

// ржЗржиржХрж╛ржорж┐ржВ ржЯрзЛржХрзЗржи ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ржЪрзЗржХ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
async function checkNewIncomingTokenTx() {
  try {
    const url = `https://api.etherscan.io/v2/api?chainid=${CHAIN_ID}&module=account&action=tokentx&address=${ADDRESS}&startblock=0&endblock=99999999&sort=desc&apikey=${API_KEY}`;
    
    const res = await axios.get(url);
    const txs = res.data.result;

    if (!txs || txs.length === 0) {
      console.log("ЁЯЪл ржХрзЛржирзЛ ржЯрзЛржХрзЗржи ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред");
      return;
    }

    const latestTx = txs[0];

    if (
      latestTx.hash !== lastTxHash &&
      latestTx.to &&
      latestTx.to.toLowerCase() === ADDRESS
    ) {
      console.log("ЁЯУе ржирждрзБржи ржЗржиржХрж╛ржорж┐ржВ ржЯрзЛржХрзЗржи ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи!");
      console.log(`Token: ${latestTx.tokenSymbol}, Amount: ${latestTx.value / Math.pow(10, latestTx.tokenDecimal)}`);
      lastTxHash = latestTx.hash;
      sendEmailNotification(latestTx);
    } else {
      console.log("тЬЕ ржирждрзБржи ржЗржиржХрж╛ржорж┐ржВ ржХрж┐ржЫрзБ ржирзЗржЗред");
    }

  } catch (err) {
    console.error("тЭМ рж╕рзНржХрзНрж░рж┐ржкрзНржЯрзЗ рж╕ржорж╕рзНржпрж╛:", err.message);
  }
}

// рж╢рзБрж░рзБ ржХрж░рзЛ ржоржирж┐ржЯрж░рж┐ржВ
console.log("ЁЯУб ржЗржиржХрж╛ржорж┐ржВ ржЯрзЛржХрзЗржи ржоржирж┐ржЯрж░рж┐ржВ + Gmail ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╢рзБрж░рзБ...");
checkNewIncomingTokenTx();
setInterval(checkNewIncomingTokenTx, 20 * 1000); // ржкрзНрж░рждрж┐ рзирзж рж╕рзЗржХрзЗржирзНржбрзЗ ржЪрзЗржХ
